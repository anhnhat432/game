const canvas = document.getElementById("gameCanvas");
const ctx = canvas.getContext("2d");

// C√†i ƒë·∫∑t tr·∫°ng th√°i game
const gameState = {
  score: 0,
  level: 1,
  rocketsFired: 0,
  maxRockets: 10,
  gameRunning: false,
};

// Khai b√°o c√°c ƒë·ªëi t∆∞·ª£ng v√† bi·∫øn kh√°c
let rockets = [];
const mars = { colorOverlay: { r: 255, g: 0, b: 0, alpha: 0 } };
const levelUpNotification = document.getElementById("levelUpNotification");
const gameOverNotification = document.getElementById("gameOverNotification");
const retryButton = document.getElementById("retryButton");
const exitButton = document.getElementById("exitButton");
const startScreen = document.getElementById("startScreen");

// H√†m v·∫Ω t√™n l·ª≠a c√≤n l·∫°i
function drawRemainingRockets() {
  const remaining = gameState.maxRockets - gameState.rocketsFired;
  ctx.font = "30px Arial";
  const startX = 10;
  const startY = 100;
  for (let i = 0; i < remaining; i++) {
    ctx.fillText("üöÄ", startX + i * 40, startY);
  }
}

// H√†m v·∫Ω ƒëi·ªÉm s·ªë
function drawScore() {
  ctx.fillStyle = "white";
  ctx.font = "20px Arial";
  ctx.fillText(`Score: ${gameState.score}`, 10, 30);
}

// Ki·ªÉm tra level-up
function checkLevelUp() {
  if (gameState.score >= 7 && gameState.level === 1) {
    gameState.level = 2;
    levelUpNotification.style.display = "block";
    setTimeout(() => {
      levelUpNotification.style.display = "none";
    }, 3000);
  }
}

// H√†m x·ª≠ l√Ω game logic
function updateGameState() {
  checkLevelUp();
  // Th√™m logic ti·∫øp theo ·ªü ƒë√¢y
  // V√≠ d·ª•: Ki·ªÉm tra c√°c t√™n l·ª≠a ƒë√£ b·∫Øn, c√°c va ch·∫°m, tƒÉng ƒëi·ªÉm...
}

// H√†m b·∫Øt ƒë·∫ßu l·∫°i tr√≤ ch∆°i
retryButton.addEventListener("click", () => {
  gameState.gameRunning = true;
  gameState.score = 0;
  gameState.rocketsFired = 0;
  rockets.length = 0;
  mars.colorOverlay = { r: 255, g: 0, b: 0, alpha: 0 };
  gameOverNotification.style.display = "none";
  startScreen.style.display = "none"; // ·∫®n m√†n h√¨nh b·∫Øt ƒë·∫ßu khi game b·∫Øt ƒë·∫ßu
  initGame();
});

// H√†m tho√°t tr√≤ ch∆°i
exitButton.addEventListener("click", () => {
  gameState.gameRunning = false;
  resetGame();
  gameOverNotification.style.display = "none";
  startScreen.style.display = "flex"; // Hi·ªÉn th·ªã m√†n h√¨nh b·∫Øt ƒë·∫ßu khi tho√°t game
});

// H√†m kh·ªüi t·∫°o game
function initGame() {
  // Kh·ªüi t·∫°o l·∫°i t·∫•t c·∫£ c√°c bi·∫øn v√† tr·∫°ng th√°i
  console.log("Game initialized!");
  gameState.score = 0;
  gameState.rocketsFired = 0;
  gameState.level = 1;
  mars.colorOverlay = { r: 255, g: 0, b: 0, alpha: 0 };
  gameState.maxRockets = 10; // Reset t√™n l·ª≠a khi b·∫Øt ƒë·∫ßu game m·ªõi
  gameState.gameRunning = true;
  startScreen.style.display = "none"; // ·∫®n m√†n h√¨nh b·∫Øt ƒë·∫ßu
  gameOverNotification.style.display = "none"; // ·∫®n th√¥ng b√°o game over
}

// H√†m reset game
function resetGame() {
  console.log("Game reset!");
  // Th·ª±c hi·ªán reset l·∫°i khi game k·∫øt th√∫c
}

// H√†m x·ª≠ l√Ω logic game ch√≠nh
function gameLoop() {
  if (gameState.gameRunning) {
    updateGameState();
    drawScore();
    drawRemainingRockets();
    // Th√™m c√°c logic kh√°c c·ªßa game (t√™n l·ª≠a bay, va ch·∫°m, v.v.)
  }

  requestAnimationFrame(gameLoop);
}

// B·∫Øt ƒë·∫ßu game
gameLoop();
